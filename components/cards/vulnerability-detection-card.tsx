"use client";
import Card from "../card";
import ThreatDetails from "../threat-detail";
import { Select } from "@headlessui/react";
import { useState } from "react";
import clsx from "clsx";
import { useVulnerabilities } from "@/hooks/vulnerabilities/use-vulnerabilities";

export default function VulnerabilityDetection() {
  const [selectedSeverity, setSelectedSeverity] = useState("");
  const {
    vulnerabilities,
    isLoading: vulIsLoading,
    loading: vulLoading,
  } = useVulnerabilities(selectedSeverity);

  return (
    <Card title="Vulnerability Assessment" extra="" className="justify-start">
      <Select
        className={clsx(
          "mt-1 block w-full appearance-none rounded-lg border border-[#D9D9D9] bg-white/5 px-3 py-1.5 text-sm/6 text-black",
          "focus:not-data-focus:outline-none data-focus:outline-2 data-focus:-outline-offset-2 data-focus:outline-white/25",
          "*:text-black"
        )}
        name="severity"
        aria-label="Project status"
        value={selectedSeverity}
        onChange={(e) => setSelectedSeverity(e.target.value)}
      >
        <option value="">All</option>
        <option value="Critical">Critical</option>
        <option value="High">High</option>
        <option value="Medium">Medium</option>
        <option value="Low">Low</option>
      </Select>

      <div className="flex-1 overflow-y-auto max-h-96">
        <div className="space-y-4">
          {vulIsLoading || vulLoading ? (
            Array.from({ length: 10 }).map((_, index) => (
              <div key={index} className="animate-pulse">
                <div className="bg-gray-200 rounded-lg p-4 h-12"></div>
              </div>
            ))
          ) : !vulnerabilities || vulnerabilities.length === 0 ? (
            <p className="text-gray-500 text-center py-4">
              No vulnerabilities found
            </p>
          ) : (
            vulnerabilities
              .slice(0, 20)
              .map((vul) => (
                <ThreatDetails
                  key={vul.plugin_id}
                  id={vul.plugin_id}
                  name={vul.plugin_name}
                  type={vul.type}
                  severity={mapSeverityLevel(vul.severity)}
                  time={vul.createdDateTime}
                  date={vul.createdDateTime}
                  action={vul.vulnerability_state}
                  description={vul.plugin_name}
                  deviceID={vul.plugin_name}
                />
              ))
          )}
        </div>
      </div>
    </Card>
  );
}

type SeverityLevel = "info" | "low" | "medium" | "high" | "critical";

type SeverityInput = 0 | 1 | 2 | 3 | 4 | 5;

function mapSeverityLevel(level: SeverityInput): SeverityLevel {
  const severityMap: Record<SeverityInput, SeverityLevel> = {
    0: "info",
    1: "low",
    2: "medium",
    3: "high",
    4: "critical",
    5: "critical",
  };

  if (level < 0 || level > 5 || !Number.isInteger(level)) {
    throw new Error(
      `Invalid severity level: ${level}. Must be an integer between 0 and 5.`
    );
  }

  return severityMap[level];
}
